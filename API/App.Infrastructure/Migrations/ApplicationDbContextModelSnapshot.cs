// <auto-generated />
using System;
using App.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace App.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("App.Model.Entities.Coach", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FinishedWorking")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("StartedWorking")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Coaches");
                });

            modelBuilder.Entity("App.Model.Entities.CoachAssignedToTeamEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CoachId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("TeamHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.HasIndex("TeamHistoryId");

                    b.ToTable("CoachAssignedToTeamEvents");
                });

            modelBuilder.Entity("App.Model.Entities.CoachCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CoachId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.HasIndex("MatchId");

                    b.ToTable("CoachesCards");
                });

            modelBuilder.Entity("App.Model.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("App.Model.Entities.Match", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ClubScore")
                        .HasColumnType("int");

                    b.Property<Guid?>("CoachId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MatchType")
                        .HasColumnType("int");

                    b.Property<string>("OpponentsClubName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OpponentsScore")
                        .HasColumnType("int");

                    b.Property<int>("PlayersGender")
                        .HasColumnType("int");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("App.Model.Entities.MatchPlayerPerformance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PlayerHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PlayerPosition")
                        .HasColumnType("int");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("PlayerHistoryId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TeamId");

                    b.ToTable("MatchPlayersPerformances");
                });

            modelBuilder.Entity("App.Model.Entities.MatchPlayerScore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ScoreType")
                        .HasColumnType("int");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("PlayerId");

                    b.ToTable("MatchPlayersScores");
                });

            modelBuilder.Entity("App.Model.Entities.MatchPoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("GoalScorerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MinuteOfMatch")
                        .HasColumnType("int");

                    b.Property<int>("Point")
                        .HasColumnType("int");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GoalScorerId");

                    b.HasIndex("MatchId");

                    b.HasIndex("TeamId");

                    b.ToTable("MatchPoints");
                });

            modelBuilder.Entity("App.Model.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("App.Model.Entities.MessageRecipient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RecipientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.HasIndex("RecipientId");

                    b.ToTable("MessageUsers");
                });

            modelBuilder.Entity("App.Model.Entities.MessageTransmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MailboxOwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MailboxType")
                        .HasColumnType("int");

                    b.Property<Guid?>("MessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MailboxOwnerId");

                    b.HasIndex("MessageId");

                    b.ToTable("MessageTransmissions");
                });

            modelBuilder.Entity("App.Model.Entities.News", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsImportant")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("News");
                });

            modelBuilder.Entity("App.Model.Entities.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FinishedPlaying")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PrefferedPosition")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartedPlaying")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Players");
                });

            modelBuilder.Entity("App.Model.Entities.PlayerCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TeamId");

                    b.ToTable("PlayersCards");
                });

            modelBuilder.Entity("App.Model.Entities.PlayerHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("PlayerHistories");
                });

            modelBuilder.Entity("App.Model.Entities.PlayerJoinedTeamEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PlayerHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TeamHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PlayerHistoryId");

                    b.HasIndex("TeamHistoryId");

                    b.ToTable("PlayerJoinedTeamEvents");
                });

            modelBuilder.Entity("App.Model.Entities.PlayerLeftTeamEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PlayerHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TeamHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PlayerHistoryId");

                    b.HasIndex("TeamHistoryId");

                    b.ToTable("PlayerLeftTeamEvents");
                });

            modelBuilder.Entity("App.Model.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("App.Model.Entities.RoleClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("App.Model.Entities.SurveyEntities.SurveyQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<Guid?>("SurveyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("SurveyQuestions");
                });

            modelBuilder.Entity("App.Model.Entities.SurveyEntities.SurveyQuestionOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("SurveyQuestionOptions");
                });

            modelBuilder.Entity("App.Model.Entities.SurveyEntities.SurveySelectQuestionAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AnswerValue")
                        .HasColumnType("int");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserResultId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserResultId");

                    b.ToTable("SurveySelectQuestionAnswers");
                });

            modelBuilder.Entity("App.Model.Entities.SurveyEntities.SurveyTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("SurveyTemplates");
                });

            modelBuilder.Entity("App.Model.Entities.SurveyEntities.SurveyTextQuestionAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AnswerValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserResultId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserResultId");

                    b.ToTable("SurveyTextQuestionAnswers");
                });

            modelBuilder.Entity("App.Model.Entities.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MainCoachId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MainCoachId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("App.Model.Entities.TeamHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TeamId")
                        .IsUnique();

                    b.ToTable("TeamHistories");
                });

            modelBuilder.Entity("App.Model.Entities.TeamPlayersPlayedMatchEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TeamHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("TeamHistoryId");

                    b.ToTable("TeamPlayersPlayedMatchEvents");
                });

            modelBuilder.Entity("App.Model.Entities.TestEntities.TestQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<Guid?>("TestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("TestQuestion");
                });

            modelBuilder.Entity("App.Model.Entities.TestEntities.TestQuestionAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AnswerValue")
                        .HasColumnType("int");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserResultId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserResultId");

                    b.ToTable("TestQuestionAnswer");
                });

            modelBuilder.Entity("App.Model.Entities.TestEntities.TestQuestionOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Points")
                        .HasColumnType("float");

                    b.Property<Guid?>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("TestQuestionOption");
                });

            modelBuilder.Entity("App.Model.Entities.TestEntities.TestTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<double>("PassedMinimalValue")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("TestTemplates");
                });

            modelBuilder.Entity("App.Model.Entities.TestEntities.UserTestResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCompleated")
                        .HasColumnType("bit");

                    b.Property<bool?>("Passed")
                        .HasColumnType("bit");

                    b.Property<double?>("ScoredPoints")
                        .HasColumnType("float");

                    b.Property<Guid?>("TestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersTestResults");
                });

            modelBuilder.Entity("App.Model.Entities.Training", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CoachId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.ToTable("Trainings");
                });

            modelBuilder.Entity("App.Model.Entities.TrainingScore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ScoreType")
                        .HasColumnType("int");

                    b.Property<Guid?>("TrainingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TrainingId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("TrainingScores");
                });

            modelBuilder.Entity("App.Model.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AccountLockoutTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("BadLogonCount")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogon")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastPasswordSet")
                        .HasColumnType("datetime2");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("App.Model.Entities.UserSurveyResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleated")
                        .HasColumnType("bit");

                    b.Property<Guid?>("SurveyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersSurveyResults");
                });

            modelBuilder.Entity("App.Model.Entities.Coach", b =>
                {
                    b.HasOne("App.Model.Entities.Country", "Country")
                        .WithMany("Coaches")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Model.Entities.User", "User")
                        .WithOne("CoachDetails")
                        .HasForeignKey("App.Model.Entities.Coach", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.Model.Entities.CoachAssignedToTeamEvent", b =>
                {
                    b.HasOne("App.Model.Entities.Coach", "Coach")
                        .WithMany("AssignedToTeamEvents")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Model.Entities.TeamHistory", "TeamHistory")
                        .WithMany("CoachAssignedToTeamEvents")
                        .HasForeignKey("TeamHistoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Coach");

                    b.Navigation("TeamHistory");
                });

            modelBuilder.Entity("App.Model.Entities.CoachCard", b =>
                {
                    b.HasOne("App.Model.Entities.Coach", "Coach")
                        .WithMany("Cards")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Model.Entities.Match", "Match")
                        .WithMany("CoachesCards")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Coach");

                    b.Navigation("Match");
                });

            modelBuilder.Entity("App.Model.Entities.Match", b =>
                {
                    b.HasOne("App.Model.Entities.Coach", null)
                        .WithMany("Matches")
                        .HasForeignKey("CoachId");
                });

            modelBuilder.Entity("App.Model.Entities.MatchPlayerPerformance", b =>
                {
                    b.HasOne("App.Model.Entities.Match", "Match")
                        .WithMany("Players")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Model.Entities.PlayerHistory", "PlayerHistory")
                        .WithMany("MatchPlayerPerformances")
                        .HasForeignKey("PlayerHistoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Model.Entities.Player", "Player")
                        .WithMany("Matches")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Model.Entities.Team", "Team")
                        .WithMany("PlayerPerformances")
                        .HasForeignKey("TeamId");

                    b.Navigation("Match");

                    b.Navigation("Player");

                    b.Navigation("PlayerHistory");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("App.Model.Entities.MatchPlayerScore", b =>
                {
                    b.HasOne("App.Model.Entities.Match", "Match")
                        .WithMany("PlayerScores")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Model.Entities.Player", "Player")
                        .WithMany("MatchScores")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Match");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("App.Model.Entities.MatchPoint", b =>
                {
                    b.HasOne("App.Model.Entities.Player", "GoalScorer")
                        .WithMany("MatchPoints")
                        .HasForeignKey("GoalScorerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Model.Entities.Match", "Match")
                        .WithMany("Points")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Model.Entities.Team", "Team")
                        .WithMany("MatchPoints")
                        .HasForeignKey("TeamId");

                    b.Navigation("GoalScorer");

                    b.Navigation("Match");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("App.Model.Entities.Message", b =>
                {
                    b.HasOne("App.Model.Entities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("App.Model.Entities.MessageRecipient", b =>
                {
                    b.HasOne("App.Model.Entities.Message", "Message")
                        .WithMany("Recipients")
                        .HasForeignKey("MessageId");

                    b.HasOne("App.Model.Entities.User", "Recipient")
                        .WithMany("MessagesReceived")
                        .HasForeignKey("RecipientId");

                    b.Navigation("Message");

                    b.Navigation("Recipient");
                });

            modelBuilder.Entity("App.Model.Entities.MessageTransmission", b =>
                {
                    b.HasOne("App.Model.Entities.User", "MailboxOwner")
                        .WithMany("Messages")
                        .HasForeignKey("MailboxOwnerId");

                    b.HasOne("App.Model.Entities.Message", "Message")
                        .WithMany("Transmissions")
                        .HasForeignKey("MessageId");

                    b.Navigation("MailboxOwner");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("App.Model.Entities.Player", b =>
                {
                    b.HasOne("App.Model.Entities.Country", "Country")
                        .WithMany("Players")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Model.Entities.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("App.Model.Entities.User", "User")
                        .WithOne("PlayerDetails")
                        .HasForeignKey("App.Model.Entities.Player", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.Model.Entities.PlayerCard", b =>
                {
                    b.HasOne("App.Model.Entities.Match", "Match")
                        .WithMany("PlayersCards")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Model.Entities.Player", "Player")
                        .WithMany("Cards")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Model.Entities.Team", "Team")
                        .WithMany("PlayersCards")
                        .HasForeignKey("TeamId");

                    b.Navigation("Match");

                    b.Navigation("Player");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("App.Model.Entities.PlayerHistory", b =>
                {
                    b.HasOne("App.Model.Entities.Player", "Player")
                        .WithOne("History")
                        .HasForeignKey("App.Model.Entities.PlayerHistory", "PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("App.Model.Entities.PlayerJoinedTeamEvent", b =>
                {
                    b.HasOne("App.Model.Entities.PlayerHistory", "PlayerHistory")
                        .WithMany("PlayerJoinedTeamEvents")
                        .HasForeignKey("PlayerHistoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Model.Entities.TeamHistory", "TeamHistory")
                        .WithMany("PlayerJoinedTeamEvents")
                        .HasForeignKey("TeamHistoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("PlayerHistory");

                    b.Navigation("TeamHistory");
                });

            modelBuilder.Entity("App.Model.Entities.PlayerLeftTeamEvent", b =>
                {
                    b.HasOne("App.Model.Entities.PlayerHistory", "PlayerHistory")
                        .WithMany("PlayerLeftTeamEvents")
                        .HasForeignKey("PlayerHistoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Model.Entities.TeamHistory", "TeamHistory")
                        .WithMany("PlayerLeftTeamEvents")
                        .HasForeignKey("TeamHistoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("PlayerHistory");

                    b.Navigation("TeamHistory");
                });

            modelBuilder.Entity("App.Model.Entities.RoleClaim", b =>
                {
                    b.HasOne("App.Model.Entities.Role", "Role")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("App.Model.Entities.SurveyEntities.SurveyQuestion", b =>
                {
                    b.HasOne("App.Model.Entities.SurveyEntities.SurveyTemplate", "Survey")
                        .WithMany("Questions")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("App.Model.Entities.SurveyEntities.SurveyQuestionOption", b =>
                {
                    b.HasOne("App.Model.Entities.SurveyEntities.SurveyQuestion", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Question");
                });

            modelBuilder.Entity("App.Model.Entities.SurveyEntities.SurveySelectQuestionAnswer", b =>
                {
                    b.HasOne("App.Model.Entities.SurveyEntities.SurveyQuestion", "Question")
                        .WithMany("SelectQuestionAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Model.Entities.UserSurveyResult", "UserResult")
                        .WithMany("SelectQuestionAnswers")
                        .HasForeignKey("UserResultId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Question");

                    b.Navigation("UserResult");
                });

            modelBuilder.Entity("App.Model.Entities.SurveyEntities.SurveyTemplate", b =>
                {
                    b.HasOne("App.Model.Entities.User", "Author")
                        .WithMany("UserSurveysTemplates")
                        .HasForeignKey("AuthorId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("App.Model.Entities.SurveyEntities.SurveyTextQuestionAnswer", b =>
                {
                    b.HasOne("App.Model.Entities.SurveyEntities.SurveyQuestion", "Question")
                        .WithMany("TextQuestionAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Model.Entities.UserSurveyResult", "UserResult")
                        .WithMany("TextQuestionAnswers")
                        .HasForeignKey("UserResultId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Question");

                    b.Navigation("UserResult");
                });

            modelBuilder.Entity("App.Model.Entities.Team", b =>
                {
                    b.HasOne("App.Model.Entities.Coach", "MainCoach")
                        .WithMany("Teams")
                        .HasForeignKey("MainCoachId");

                    b.Navigation("MainCoach");
                });

            modelBuilder.Entity("App.Model.Entities.TeamHistory", b =>
                {
                    b.HasOne("App.Model.Entities.Team", "Team")
                        .WithOne("History")
                        .HasForeignKey("App.Model.Entities.TeamHistory", "TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("App.Model.Entities.TeamPlayersPlayedMatchEvent", b =>
                {
                    b.HasOne("App.Model.Entities.Match", "Match")
                        .WithMany("TeamPlayersPlayedMatchEvents")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Model.Entities.TeamHistory", "TeamHistory")
                        .WithMany("TeamPlayersPlayedMatchEvents")
                        .HasForeignKey("TeamHistoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Match");

                    b.Navigation("TeamHistory");
                });

            modelBuilder.Entity("App.Model.Entities.TestEntities.TestQuestion", b =>
                {
                    b.HasOne("App.Model.Entities.TestEntities.TestTemplate", "Test")
                        .WithMany("Questions")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Test");
                });

            modelBuilder.Entity("App.Model.Entities.TestEntities.TestQuestionAnswer", b =>
                {
                    b.HasOne("App.Model.Entities.TestEntities.TestQuestion", "Question")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("QuestionId");

                    b.HasOne("App.Model.Entities.TestEntities.UserTestResult", "UserResult")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("UserResultId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Question");

                    b.Navigation("UserResult");
                });

            modelBuilder.Entity("App.Model.Entities.TestEntities.TestQuestionOption", b =>
                {
                    b.HasOne("App.Model.Entities.TestEntities.TestQuestion", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Question");
                });

            modelBuilder.Entity("App.Model.Entities.TestEntities.TestTemplate", b =>
                {
                    b.HasOne("App.Model.Entities.User", "Author")
                        .WithMany("UserTestsTemplates")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Author");
                });

            modelBuilder.Entity("App.Model.Entities.TestEntities.UserTestResult", b =>
                {
                    b.HasOne("App.Model.Entities.TestEntities.TestTemplate", "Test")
                        .WithMany("UserResults")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Model.Entities.User", "User")
                        .WithMany("TestsResults")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Test");

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.Model.Entities.Training", b =>
                {
                    b.HasOne("App.Model.Entities.Coach", null)
                        .WithMany("Trainings")
                        .HasForeignKey("CoachId");
                });

            modelBuilder.Entity("App.Model.Entities.TrainingScore", b =>
                {
                    b.HasOne("App.Model.Entities.Player", "Player")
                        .WithMany("TrainingScores")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Model.Entities.Training", "Training")
                        .WithMany("Scores")
                        .HasForeignKey("TrainingId");

                    b.HasOne("App.Model.Entities.User", "Modifier")
                        .WithMany("CreatedTrainingScores")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Modifier");

                    b.Navigation("Player");

                    b.Navigation("Training");
                });

            modelBuilder.Entity("App.Model.Entities.User", b =>
                {
                    b.HasOne("App.Model.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Role");
                });

            modelBuilder.Entity("App.Model.Entities.UserSurveyResult", b =>
                {
                    b.HasOne("App.Model.Entities.SurveyEntities.SurveyTemplate", "Survey")
                        .WithMany("RespondentsResults")
                        .HasForeignKey("SurveyId");

                    b.HasOne("App.Model.Entities.User", "User")
                        .WithMany("SurveysResults")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Survey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.Model.Entities.Coach", b =>
                {
                    b.Navigation("AssignedToTeamEvents");

                    b.Navigation("Cards");

                    b.Navigation("Matches");

                    b.Navigation("Teams");

                    b.Navigation("Trainings");
                });

            modelBuilder.Entity("App.Model.Entities.Country", b =>
                {
                    b.Navigation("Coaches");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("App.Model.Entities.Match", b =>
                {
                    b.Navigation("CoachesCards");

                    b.Navigation("Players");

                    b.Navigation("PlayersCards");

                    b.Navigation("PlayerScores");

                    b.Navigation("Points");

                    b.Navigation("TeamPlayersPlayedMatchEvents");
                });

            modelBuilder.Entity("App.Model.Entities.Message", b =>
                {
                    b.Navigation("Recipients");

                    b.Navigation("Transmissions");
                });

            modelBuilder.Entity("App.Model.Entities.Player", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("History");

                    b.Navigation("Matches");

                    b.Navigation("MatchPoints");

                    b.Navigation("MatchScores");

                    b.Navigation("TrainingScores");
                });

            modelBuilder.Entity("App.Model.Entities.PlayerHistory", b =>
                {
                    b.Navigation("MatchPlayerPerformances");

                    b.Navigation("PlayerJoinedTeamEvents");

                    b.Navigation("PlayerLeftTeamEvents");
                });

            modelBuilder.Entity("App.Model.Entities.Role", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("App.Model.Entities.SurveyEntities.SurveyQuestion", b =>
                {
                    b.Navigation("Options");

                    b.Navigation("SelectQuestionAnswers");

                    b.Navigation("TextQuestionAnswers");
                });

            modelBuilder.Entity("App.Model.Entities.SurveyEntities.SurveyTemplate", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("RespondentsResults");
                });

            modelBuilder.Entity("App.Model.Entities.Team", b =>
                {
                    b.Navigation("History");

                    b.Navigation("MatchPoints");

                    b.Navigation("PlayerPerformances");

                    b.Navigation("Players");

                    b.Navigation("PlayersCards");
                });

            modelBuilder.Entity("App.Model.Entities.TeamHistory", b =>
                {
                    b.Navigation("CoachAssignedToTeamEvents");

                    b.Navigation("PlayerJoinedTeamEvents");

                    b.Navigation("PlayerLeftTeamEvents");

                    b.Navigation("TeamPlayersPlayedMatchEvents");
                });

            modelBuilder.Entity("App.Model.Entities.TestEntities.TestQuestion", b =>
                {
                    b.Navigation("Options");

                    b.Navigation("QuestionAnswers");
                });

            modelBuilder.Entity("App.Model.Entities.TestEntities.TestTemplate", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("UserResults");
                });

            modelBuilder.Entity("App.Model.Entities.TestEntities.UserTestResult", b =>
                {
                    b.Navigation("QuestionAnswers");
                });

            modelBuilder.Entity("App.Model.Entities.Training", b =>
                {
                    b.Navigation("Scores");
                });

            modelBuilder.Entity("App.Model.Entities.User", b =>
                {
                    b.Navigation("CoachDetails");

                    b.Navigation("CreatedTrainingScores");

                    b.Navigation("Messages");

                    b.Navigation("MessagesReceived");

                    b.Navigation("PlayerDetails");

                    b.Navigation("SurveysResults");

                    b.Navigation("TestsResults");

                    b.Navigation("UserSurveysTemplates");

                    b.Navigation("UserTestsTemplates");
                });

            modelBuilder.Entity("App.Model.Entities.UserSurveyResult", b =>
                {
                    b.Navigation("SelectQuestionAnswers");

                    b.Navigation("TextQuestionAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
